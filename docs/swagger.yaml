basePath: /api
definitions:
  dtos.AuthLoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dtos.AuthLoginResponse:
    properties:
      token:
        type: string
    type: object
  dtos.AuthProfileResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  dtos.AuthRegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dtos.CreateNoteRequest:
    properties:
      content:
        type: string
      room_id:
        type: integer
      title:
        type: string
    type: object
  dtos.CreateRoomRequest:
    properties:
      capacity:
        type: integer
      description:
        type: string
      name:
        type: string
      subject:
        type: string
    type: object
  dtos.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dtos.ErrorResponse:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  dtos.NoteResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      room_id:
        type: integer
      room_name:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_email:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  dtos.RoomMemberResponse:
    properties:
      joined_at:
        type: string
      role:
        type: string
      user_email:
        type: string
      user_id:
        type: integer
      user_name:
        type: string
    type: object
  dtos.RoomResponse:
    properties:
      capacity:
        type: integer
      created_at:
        type: string
      created_by:
        type: integer
      description:
        type: string
      id:
        type: integer
      members:
        items:
          $ref: '#/definitions/dtos.RoomMemberResponse'
        type: array
      name:
        type: string
      notes:
        items:
          $ref: '#/definitions/dtos.NoteResponse'
        type: array
      subject:
        type: string
      updated_at:
        type: string
    type: object
  dtos.UpdateNoteRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  dtos.UpdateRoomRequest:
    properties:
      capacity:
        type: integer
      description:
        type: string
      name:
        type: string
      subject:
        type: string
    type: object
  dtos.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dtos.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: REST API for room reservation management with user authentication
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Room Reservation API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AuthLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: Get current authenticated user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.AuthProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user account
      parameters:
      - description: Registration details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.AuthRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.AuthLoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      summary: User registration
      tags:
      - auth
  /notes:
    post:
      consumes:
      - application/json
      description: Create a new note in a room
      parameters:
      - description: Note creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateNoteRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.NoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create note
      tags:
      - notes
  /notes/{note_id}:
    delete:
      consumes:
      - application/json
      description: Delete note (only by note creator)
      parameters:
      - description: Note ID
        in: path
        name: note_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete note
      tags:
      - notes
    get:
      consumes:
      - application/json
      description: Retrieve detailed note information
      parameters:
      - description: Note ID
        in: path
        name: note_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.NoteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get note by ID
      tags:
      - notes
    put:
      consumes:
      - application/json
      description: Update note information (only by note creator)
      parameters:
      - description: Note ID
        in: path
        name: note_id
        required: true
        type: integer
      - description: Note update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateNoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update note
      tags:
      - notes
  /notes/my-notes:
    get:
      consumes:
      - application/json
      description: Get all notes created by the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.NoteResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my notes
      tags:
      - notes
  /notes/room/{room_id}:
    get:
      consumes:
      - application/json
      description: Get all notes in a specific room
      parameters:
      - description: Room ID
        in: path
        name: room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.NoteResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get notes by room
      tags:
      - notes
  /rooms:
    get:
      consumes:
      - application/json
      description: Retrieve list of all available rooms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.RoomResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all rooms
      tags:
      - rooms
    post:
      consumes:
      - application/json
      description: Create a new room and automatically join as creator
      parameters:
      - description: Room creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateRoomRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.RoomResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create room
      tags:
      - rooms
  /rooms/{room_id}:
    delete:
      consumes:
      - application/json
      description: Delete room (only by room creator)
      parameters:
      - description: Room ID
        in: path
        name: room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete room
      tags:
      - rooms
    get:
      consumes:
      - application/json
      description: Retrieve detailed room information including members and notes
      parameters:
      - description: Room ID
        in: path
        name: room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.RoomResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get room by ID
      tags:
      - rooms
    put:
      consumes:
      - application/json
      description: Update room information (only by room creator)
      parameters:
      - description: Room ID
        in: path
        name: room_id
        required: true
        type: integer
      - description: Room update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateRoomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update room
      tags:
      - rooms
  /rooms/{room_id}/join:
    post:
      consumes:
      - application/json
      description: Join an existing room
      parameters:
      - description: Room ID
        in: path
        name: room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Join room
      tags:
      - rooms
  /rooms/{room_id}/leave:
    delete:
      consumes:
      - application/json
      description: Leave a room you're currently in
      parameters:
      - description: Room ID
        in: path
        name: room_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Leave room
      tags:
      - rooms
  /rooms/my-rooms:
    get:
      consumes:
      - application/json
      description: Get list of rooms the current user is a member of
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dtos.RoomResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get my rooms
      tags:
      - rooms
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve user information by user ID
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User creation details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create user
      tags:
      - users
  /users/{user_id}:
    delete:
      consumes:
      - application/json
      description: Delete user by user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information by user ID
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: integer
      - description: User update details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /users/by-email:
    get:
      consumes:
      - application/json
      description: Retrieve user information by email address
      parameters:
      - description: User email address
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dtos.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dtos.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by email
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
